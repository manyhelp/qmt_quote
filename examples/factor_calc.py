# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
from typing import TypeVar

import polars as pl  # noqa
import polars.selectors as cs  # noqa

# from loguru import logger  # noqa
from polars import DataFrame as _pl_DataFrame
from polars import LazyFrame as _pl_LazyFrame

# ===================================
# 导入优先级，例如：ts_RSI在ta与talib中都出现了，优先使用ta
# 运行时，后导入覆盖前导入，但IDE智能提示是显示先导入的
_ = 0  # 只要之前出现了语句，之后的import位置不参与调整
# from polars_ta.prefix.talib import *  # noqa
from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.ta import *  # noqa
from polars_ta.prefix.wq import *  # noqa
from polars_ta.prefix.cdl import *  # noqa

DataFrame = TypeVar("DataFrame", _pl_LazyFrame, _pl_DataFrame)
# ===================================

_ = ["close", "CLOSE", "factor2"]
[close, CLOSE, factor2] = [pl.col(i) for i in _]

_ = ["MA5", "MA10"]
[MA5, MA10] = [pl.col(i) for i in _]

_DATE_ = "time"
_ASSET_ = "code"
_NONE_ = None
_TRUE_ = True
_FALSE_ = False


def unpack(x: Expr, idx: int = 0) -> Expr:
    return x.struct[idx]


CS_SW_L1 = r"^sw_l1_\d+$"


def func_0_cl(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        CLOSE=close * factor2,
    )
    return df


def func_1_ts__code(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        MA5=(ts_mean(CLOSE, 5)).over(CLOSE.is_not_null(), _ASSET_, order_by=_DATE_),
        MA10=(ts_mean(CLOSE, 10)).over(CLOSE.is_not_null(), _ASSET_, order_by=_DATE_),
    )
    return df


"""
#========================================func_0_cl
CLOSE = close*factor2
#========================================func_1_ts__code
MA5 = ts_mean(CLOSE, 5)
MA10 = ts_mean(CLOSE, 10)
"""

"""
CLOSE = close*factor2
MA5 = ts_mean(CLOSE, 5)
MA10 = ts_mean(CLOSE, 10)
"""


def main(df: DataFrame) -> DataFrame:
    # logger.info("start...")

    df = func_0_cl(df).drop(*[])
    df = func_1_ts__code(df.sort(_ASSET_, _DATE_)).drop(*[])

    # drop intermediate columns
    # df = df.select(pl.exclude(r'^_x_\d+$'))
    df = df.select(~cs.starts_with("_"))

    # shrink
    df = df.select(cs.all().shrink_dtype())
    # df = df.shrink_to_fit()

    # logger.info('done')

    # save
    # df.write_parquet('output.parquet')

    return df


# if __name__ in ("__main__", "builtins"):
#     # TODO: 数据加载或外部传入
#     df_output = main(df_input)
